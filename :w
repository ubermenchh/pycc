from src.codegen import ASMGenerator
from src.lexer import *
from src.parser import *
from src.codegen import *

import sys

def process(file_path, args):
    try: 
        with open(file_path, "r") as f:
            text = f.read()

        if args.all:
            args.lex = args.parse = args.print_ast = args.codegen = True
    
        tokens = tokenize(text)
        if args.lex:
            print("---------- TOKENS ----------")
            for token in tokens:
                print(token)

        parser = Parser(tokens)
        ast = parser.parse()

        printer = ASTPrinter()
        if args.parse:
            print("---------- Abstract Syntax Tree ----------")
            print(printer.print(ast))
            print()

        generator = ASMGenerator()
        asm_code = generator.generate(ast)

        if args.codegen:
            print("---------- Assembly Generated ----------")
            print(asm_code)
            print()

        if not (args.lex or args.parse or args.codegen):
            generator.emit()

    except FileNotFoundError:
        print(f"[ERROR]: File `{file_path}` not found")
        sys.exit(1);
    except Exception as e:
        print(f"Error during compilation: {str(e)}")
        sys.exit(1)

with open("main.c", "r") as f:
    text = f.read()

print(text)

tokens = tokenize(text)
for token in tokens:
    print(token)

parser = Parser(tokens)
ast = parser.parse()

printer = ASTPrinter()
generator = ASMGenerator()

print(printer.print(ast))
asm_code = generator.generate(ast)

print(asm_code)

generator.emit()
